<Programa> ::= <Cabecera_programa> <bloque>"."



<bloque> ::= <Inicio_de_bloque> <Declar_de_variables_locales> <Declar_de_subprogs> <Sentencias> <Fin_de_bloque>
<Declar_de_subprogs> ::= <Declar_de_subprogs> <Declar_subprog>
	| ""
<Declar_subprog> ::= <Cabecera_subprograma> <bloque>
<Declar_de_variables_locales> ::= <Marca_ini_declar_variables> <Variables_locales> <Marca_fin_declar_variables>
<Cabecera_programa> ::= "program" <identificador> ";"
	| ""
<Marca_ini_declar_variables> ::= "var"
<Marca_fin_declar_variables> ::= ""

<Inicio_de_bloque> ::= "begin"
<Fin_de_bloque> ::= "end"
<Variables_locales> ::= <Variables_locales> <Cuerpo_declar_variables>
	| <Cuerpo_declar_variables>
<Cuerpo_declar_variables> ::= <identificador> <variable> ":" "set of integer" ";"
	| <identificador> <variable> ":" "set of real" ";"
	| <identificador> <variable> ":" "set of character" ";"
	| <identificador> <variable> ":" "set of boolean" ";"
	| <identificador> <variable> ":" "integer" ";"
	| <identificador> <variable> ":" "real" ";"
	| <identificador> <variable> ":" "character" ";"
	| <identificador> <variable> ":" "boolean" ";"
<variable> ::= "," <identificador><variable>
    |""

<Cabecera_subprog> ::= "function" <identificador> "(" <lista_argumentos> ")" ":" "set of integer" ";"
	| "function" <identificador> "(" <lista_argumentos> ")" ":" "set of real" ";"
	| "function" <identificador> "(" <lista_argumentos> ")" ":" "set of character" ";"
	| "function" <identificador> "(" <lista_argumentos> ")" ":" "set of boolean" ";"
	| "function" <identificador> "(" <lista_argumentos> ")" ":" "integer" ";"
	| "function" <identificador> "(" <lista_argumentos> ")" ":" "real" ";"
	| "function" <identificador> "(" <lista_argumentos> ")" ":" "character" ";"
	| "function" <identificador> "(" <lista_argumentos> ")" ":" "boolean" ";"
<lista_argumentos> ::= <lista_argumentos> ";" <Cuerpo_declar_argumentos>
	| <Cuerpo_declar_argumentos>
<Cuerpo_declar_argumentos> ::= <identificador> <variable_argumento> ":" "set of integer"
	| <identificador> <variable_argumento> ":" "set of real"
	| <identificador> <variable_argumento> ":" "set of character"
	| <identificador> <variable_argumento> ":" "set of boolean"
	| <identificador> <variable_argumento> ":" "integer"
	| <identificador> <variable_argumento> ":" "real"
	| <identificador> <variable_argumento> ":" "real"
	| <identificador> <variable_argumento> ":" "boolean"
<variable_argumento> ::= "," <identificador> <variable_argumento>
	| ""

<Sentencias> ::= <Sentencias> <Sentencia>
	| <Sentencia>
<Sentencia> ::= <bloque>
	| <sentencia_asignacion>
	| <sentencia_if>
	| <sentencia_while>
	| <sentencia_for>
	| <sentencia_entrada>
	| <sentencia_salida>
	| <sentencia_return>
<sentencia_asignacion> ::= <identificador>":="<expresion>";" 
<sentencia_if> ::= "if" <expresion> "then" <Inicio_de_bloque> <Sentencias> <Fin_de_bloque> "else" <Inicio_de_bloque> <Sentencias> <Fin_de_bloque> ";"
	| "if" <expresion> "then" <Inicio_de_bloque> <Sentencias> <Fin_de_bloque> ";"
	| "if" <expresion> "then" <Inicio_de_bloque> <Sentencias> <Fin_de_bloque> <sentencia_elseif> "else" <Inicio_de_bloque> <Sentencias> <Fin_de_bloque> ";"
<sentencia_elseif> ::= "else if" <Inicio_de_bloque> <Sentencias> <Fin_de_bloque> <sentencia_elseif>       <---------------he visto ejemplos que no tienen begin end en las sentencias if
    | ""
<sentencia_while> ::= "while" <expresion> "do" <Inicio_de_bloque> <Sentencias> <Fin_de_bloque> ";"
<sentencia_for> ::= "for" <identificador>":="<expresion> "to" <expresion> "do" <Inicio_de_bloque> <Sentencias> <Fin_de_bloque> ";"

<sentencia_entrada> ::= <nomb_entrada> "(" <lista_variables> ");"
<lista_variables> ::= <identificador>
    | <identificador> "," <lista_variables> 
<nomb_entrada> ::= "readln"
    | "read"
<sentencia_salida> ::= <nomb_salida> "(" <lista_expresiones_o_cadena> ");"

<lista_expresiones_o_cadena> ::= <identificador>
    | "," <identificador>
    | "'"<frase>"'""
    | "," "'"<frase>"'""

 <frase> ::= <constante> <frase>
    | <constante>
<nomb_salida> ::= "writeln" 
	|"write"

<sentencia_return> ::= <sentencia_asignacion>
<expresion> ::= "("<expresion>")"
	| "+"<expresion>
	| "-"<expresion>
	| <expresion>"+"<expresion>
	| <expresion>"-"<expresion>
	| <expresion>"*"<expresion>
	| <expresion>"/"<expresion>
	| <expresion> ">" <expresion>
	| <expresion> ">=" <expresion>
	| <expresion> "<" <expresion>
	| <expresion> "<=" <expresion>
	| <expresion> "=" <expresion>
	| <expresion> "¬=" <expresion>
	| <expresion> "<>" <expresion>
	| "not"<expresion>
	| <expresion>"and"<expresion>
	| <expresion>"or"<expresion>
	| <expresion>"xor"<expresion>
	| <expresion>"in"<expresion>
	| <identificador>
	| <constante>
	| <conjunto>
	| <funcion> 

<identificador> ::= <letra> <restoIdentificador>
	| "_"<restoIdentificador>

<restoIdentificador> ::= <restoIdentificador> <digito>
	| <restoIdentificador> <letra>
	| <digito>
	| <letra>
    | ""
<conjunto> ::= "[]"
	| "["<expresion> <restoConjunto>"]"            <------Yo no he visto que dentro de un conjunto se puedan poner expresiones [A+B]
<restoConjunto> ::= ","<expresion> <restoConjunto>
    | <constante>".."<constante>
	| ""

<constante> ::= <constanteReal>
	| <constateEntera>
	| <caracter>
	| <booleano>

<constanteReal> ::= <constanteEntera>"."<constanteEntera>
<constanteEntera> ::= <constanteEntera> <digito>
	| <digito>
<caracter> ::= "'"<letra>"'"
<digito> ::= "0"|"1"|"2"|"3"|"4"|"5"|"6"|"7"|"8"|"9"
<letra> ::= "a"|"b"|"c"|"d"|"e"|"f"|"g"|"h"|"i"|"j"|"k"|"l"|"m"
	|"n"|"o"|"p"|"q"|"r"|"s"|"t"|"u"|"v"|"w"|"x"|"y"|"z"
	|"A"|"B"|"C"|"D"|"E"|"F"|"G"|"H"|"I"|"J"|"K"|"L"|"M"
	|"N"|"O"|"P"|"Q"|"R"|"S"|"T"|"U"|"V"|"W"|"X"|"Y"|"Z"
<booleano> ::= "true"
	| "false"